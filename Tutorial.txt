1: dar o comando: npm init -y pra criar package.json

2: dar o comando:  npm install next react react-dom

3: inserir scripts : "dev": "next",
    "start":"next start",
    "build": "next build"

4:criar o .gitIgnore e colocar o node_modules dentro

5: Em pages criei o About.js que é página sobre da app

6: Criamos uma page contact.js e nela adicionaomos a func component padrão 

7: criamos a page search.js com a func component padrão

8:Instalar o TailwindCSS: seguindo a documentação pra next: https://tailwindcss.com/docs/guides/nextjs

9: Criei em pages _app.js configurando pra ser chamado em todas as pages usando props e spread operators assim o conteúdo de _app aparecerar em todas as páginas

10: dando o import: import '../css/styles.css' na page _app.js todas as páginas carregarão o TailwindCSS

11: Testanto o response design. Na documentação do tailwindcss mostra  a faixa de pixels pra a mudança de layout de acordo com o tamanho da tela,
mostra a legenda dos padding p1,p-2 e etc pode converter rem em pixel no google pr ter uma noção, pesquinsamos tambem no tailwind container tambem tem sua legenda sm, md, lg, xl,2xl com seus determinados tamanhos em pixels

12: inserir na diva principal de _app.js :
<div className='container mx-auto'> pra centralizar a tela apenas na <div> titulo e nos <Component/> 

13: Na raiz do projeto criar a pasta component/header/index.js  criei o componete Header tranferir as <div> correpondente ao header depois importei o component de volta ao _app.js

14: Outra opção de aplicar o css é como usar no React criando um arquivo module.css na pasta do componente e chamando ele com:
 import styles from './' e na tag : <div className={styles.nomeClasse}>
desse jeito tambem é possivel combinar tailwindcss  global com css local concatenando:  <div className={'p-4'+styles. nomeClasse}>  

15:transferir os links de pages/index.js pra a <div> de components/header/index.js , depois com o tailwind centralizei os links e sublinhei com o hover

16: criei com componente layout/index.js nele tranferimos a chmda do component header e footer com seus imports no parâmetro do component inserimos o {children} e depois chamamos o childre dentro da div principal, dessa forma no componente _app.js importamos o layout e envolvemos  o component :<Layout><Component {...pageProps}/></Layout>

17:Criando o layout da página de pesquisa/search

18: criar planilha com 3 abas a prmeira: é sumário apresentação com logo, a segunda é resultado/Pesquisa, e a terceria:Configurações 

19: acessar google developer console iniciar projetos, dar um nome e buscar API em: + ativar APIS e SERVIÇOS procurar por spreadsheets e ativar

20: selecionar a opção credenciais/ gerenciar contas serviços/ criar contas de serviço/ adicionar permissão de conta de serviço criar conta depois da conta criada,clicar em 3pontos a esquerda da tela e gerenciar chaves criar chave JSON. depois disso vai gerar um arquivo que vamos jogar numa pasta criada ao lado da pasta Palpitebox

21: renomear arquivo .json pra credentials.json depois na mesma pasta criar connect.js, dar : npm init -y e npm install google-spreadsheet depois em google cloud eu copio o email de serviso gerado na criação da API:
palpitebox@palpitebox-358500.iam.gserviceaccount.com dai eu vou n google planilha e em compartilhar e colo esse email e compartilho

22: em seguida no arquivo connect.js eu importo com require o modulo GoolgeSpreadsheet e o credentials.json crio a promise pra chamar a planilha utilizando o trecho da URL da planilha

23: Copiei o arquivo connect e rename to load-config.js e nele inserimos o codigo na função asyncrona estanciando a planilha de configurações depoois referênciando o raio de pesquisa com loadcells e capturando o valor pela linha e coluna declarada

24: Criar add-row.js e lá capturamos a planilha usando o sheeByIndex[] depois usando o await usamos o sheet.addRow pra inserir os valores de acordo com a referência das celulas da planilha

25:J na pasta do PalpiteBox dar um : npm install swr

26: Pracriar uma API no NextJS: em pages crio uma pasta API/get-promo.js e criar função async com req e res

27: em index.js importar o swr depois cria um fetch retornando JSON() entanciando em fetcher e usa como segundo parâmetro do useSWR('caminho dos dados/fetcher') que server pra buscar os dados da app tetsa com :
return (<pre>{JSON.stringify(data)}</pre>) pra ver se retona

28:Na page/search.js criar <input onClick={save}> com a mesma classe de style do botão da página index.js criei a função save async  retornando uma função form e mandamos esse dados pra api da app com o fetch usando o metodo POST        
29: Em api criar o arquivo save.js que será onde os arquivos serão salvos

30: copiar arquivo credentials.json pra a pasta do projeto depois copiar a função async do load-config.js pra get-promo.js. Modificar o require pra import e  configurar toda a function async detalhes comentados no codigo e instalar : npm install google-spreadsheet

31:configurando o arquivo save.js colocar os imports com os modulos pertinentes e configurando a função async deixando ela dinâmica

32: copiar dados da const sheet que captura as celulas da planilha  do arquivo  get-promo.js  e jogar em save.js
pra estaelecer conexão com a planilha 02 no arquivo save.js pra poder add cumpom

33:criar let cupom e let promo e usar uma condicional  que se o itend da planilha [2] tiver marcado e vai gerar o cupom, adicionei  a planilha o campo data de preenchimento e nó coodigo pus ela pr gerar um new Date(), pra poder gerar o o horário local corretamente instala o : npm install moment --save, dar o import do moment e substituir o new Date() por "moment().format('DD/MM/YYYY, HH:mm:ss')"

34:Pra gerar o cupom: vamos por esse formato moment() no Cupom juntando todos os caracters, temos que incluir no momente a escala SSS de milisegundo pra não ter chance de gerar 2 cupons iguais em seguida tambem vamos acresentar o parseInt pra trnaformar os numeros em hexadeciamal, um toString e por último um toUpperCase() pra deixar caixa alta parseInt(moment().format('DDMMYYYYHHmmsSSS')).toString(16).toUpperCase()

35: entanciar o o moment() em uma função genCupom e no return usar substr() pra dividir em grupos

36:FORMULÁRIO em search. js add <input> pra cada tipo de dado com seus respectivos placeholders, importar o useState() criar o state form, setForm e colocar o formulario dentro do objeto do state colocar um  
<pre>{JSON.stringify(form, null, 2)}</pre>dentro do return pra ver o formato do state form renderizado

37:a base de programar formulários começa com a criação de um state em seguida com cria-se uma função com uma ação e por ultimo chama essa função dentro do onChange que está no corpo do <input>, sendo assim constroi a função onChange pra renderizar o valor digitado simuntaneamente 

38: proximo passo é add propriedades name='Nome'name='Whatsapp' name='Email'que são o nomes dos campos que vão receber valores nos <input> depois crio uma const key recebendo evt.target.name ai dentro do setForm eu ponho [key]=value, agora os dados digitados no <input> rebderizarão no form com ajuda do setForm basta salvar que ele vai direto pra planilha

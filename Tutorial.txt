1: dar o comando: npm init -y pra criar package.json

2: dar o comando:  npm install next react react-dom

3: inserir scripts : "dev": "next",
    "start":"next start",
    "build": "next build"

4:criar o .gitIgnore e colocar o node_modules dentro

5: Em pages criei o About.js que é página sobre da app

6: Criamos uma page contact.js e nela adicionaomos a func component padrão 

7: criamos a page search.js com a func component padrão

8:Instalar o TailwindCSS: seguindo a documentação pra next: https://tailwindcss.com/docs/guides/nextjs

9: Criei em pages _app.js configurando pra ser chamado em todas as pages usando props e spread operators assim o conteúdo de _app aparecerar em todas as páginas

10: dando o import: import '../css/styles.css' na page _app.js todas as páginas carregarão o TailwindCSS

11: Testanto o response design. Na documentação do tailwindcss mostra  a faixa de pixels pra a mudança de layout de acordo com o tamanho da tela,
mostra a legenda dos padding p1,p-2 e etc pode converter rem em pixel no google pr ter uma noção, pesquinsamos tambem no tailwind container tambem tem sua legenda sm, md, lg, xl,2xl com seus determinados tamanhos em pixels

12: inserir na diva principal de _app.js :
<div className='container mx-auto'> pra centralizar a tela apenas na <div> titulo e nos <Component/> 

13: Na raiz do projeto criar a pasta component/header/index.js  criei o componete Header tranferir as <div> correpondente ao header depois importei o component de volta ao _app.js

14: Outra opção de aplicar o css é como usar no React criando um arquivo module.css na pasta do componente e chamando ele com:
 import styles from './' e na tag : <div className={styles.nomeClasse}>
desse jeito tambem é possivel combinar tailwindcss  global com css local concatenando:  <div className={'p-4'+styles. nomeClasse}>  

15:transferir os links de pages/index.js pra a <div> de components/header/index.js , depois com o tailwind centralizei os links e sublinhei com o hover

16: criei com componente layout/index.js nele tranferimos a chmda do component header e footer com seus imports no parâmetro do component inserimos o {children} e depois chamamos o childre dentro da div principal, dessa forma no componente _app.js importamos o layout e envolvemos  o component :<Layout><Component {...pageProps}/></Layout>

17:Criando o layout da página de pesquisa/search

18: criar planilha com 3 abas a prmeira: é sumário apresentação com logo, a segunda é resultado/Pesquisa, e a terceria:Configurações 

19: acessar google developer console iniciar projetos, dar um nome e buscar API em: + ativar APIS e SERVIÇOS procurar por spreadsheets e ativar

20: selecionar a opção credenciais/ gerenciar contas serviços/ criar contas de serviço/ adicionar permissão de conta de serviço criar conta depois da conta criada,clicar em 3pontos a esquerda da tela e gerenciar chaves criar chave JSON. depois disso vai gerar um arquivo que vamos jogar numa pasta criada ao lado da pasta Palpitebox

21: renomear arquivo .json pra credentials.json depois na mesma pasta criar connect.js, dar : npm init -y e npm install google-spreadsheet depois em google cloud eu copio o email de serviso gerado na criação da API:
palpitebox@palpitebox-358500.iam.gserviceaccount.com dai eu vou n google planilha e em compartilhar e colo esse email e compartilho

22: em seguida no arquivo connect.js eu importo com require o modulo GoolgeSpreadsheet e o credentials.json crio a promise pra chamar a planilha utilizando o trecho da URL da planilha

23: Copiei o arquivo connect e rename to load-config.js e nele inserimos o codigo na função asyncrona estanciando a planilha de configurações depoois referênciando o raio de pesquisa com loadcells e capturando o valor pela linha e coluna declarada
